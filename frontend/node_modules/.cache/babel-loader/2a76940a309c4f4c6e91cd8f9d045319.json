{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"value\", \"selection\", \"extensions\", \"onChange\", \"onStatistics\", \"onCreateEditor\", \"onUpdate\", \"autoFocus\", \"theme\", \"height\", \"minHeight\", \"maxHeight\", \"width\", \"minWidth\", \"maxWidth\", \"basicSetup\", \"placeholder\", \"indentWithTab\", \"editable\", \"readOnly\", \"root\"];\nimport React, { useRef, forwardRef, useImperativeHandle } from 'react';\nimport { useCodeMirror } from './useCodeMirror';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport * from '@uiw/codemirror-extensions-basic-setup';\nexport * from './useCodeMirror';\nexport * from './utils';\nvar ReactCodeMirror = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n      _props$value = props.value,\n      value = _props$value === void 0 ? '' : _props$value,\n      selection = props.selection,\n      _props$extensions = props.extensions,\n      extensions = _props$extensions === void 0 ? [] : _props$extensions,\n      onChange = props.onChange,\n      onStatistics = props.onStatistics,\n      onCreateEditor = props.onCreateEditor,\n      onUpdate = props.onUpdate,\n      autoFocus = props.autoFocus,\n      _props$theme = props.theme,\n      theme = _props$theme === void 0 ? 'light' : _props$theme,\n      height = props.height,\n      minHeight = props.minHeight,\n      maxHeight = props.maxHeight,\n      width = props.width,\n      minWidth = props.minWidth,\n      maxWidth = props.maxWidth,\n      basicSetup = props.basicSetup,\n      placeholder = props.placeholder,\n      indentWithTab = props.indentWithTab,\n      editable = props.editable,\n      readOnly = props.readOnly,\n      root = props.root,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var editor = useRef(null);\n\n  var _useCodeMirror = useCodeMirror({\n    container: editor.current,\n    root: root,\n    value: value,\n    autoFocus: autoFocus,\n    theme: theme,\n    height: height,\n    minHeight: minHeight,\n    maxHeight: maxHeight,\n    width: width,\n    minWidth: minWidth,\n    maxWidth: maxWidth,\n    basicSetup: basicSetup,\n    placeholder: placeholder,\n    indentWithTab: indentWithTab,\n    editable: editable,\n    readOnly: readOnly,\n    selection: selection,\n    onChange: onChange,\n    onStatistics: onStatistics,\n    onCreateEditor: onCreateEditor,\n    onUpdate: onUpdate,\n    extensions: extensions\n  }),\n      state = _useCodeMirror.state,\n      view = _useCodeMirror.view,\n      container = _useCodeMirror.container,\n      setContainer = _useCodeMirror.setContainer;\n\n  useImperativeHandle(ref, function () {\n    return {\n      editor: editor.current,\n      state: state,\n      view: view\n    };\n  }, [editor, container, state, view]); // check type of value\n\n  if (typeof value !== 'string') {\n    throw new Error(\"value must be typeof string but got \" + typeof value);\n  }\n\n  var defaultClassNames = typeof theme === 'string' ? \"cm-theme-\" + theme : 'cm-theme';\n  return /*#__PURE__*/_jsx(\"div\", _extends({\n    ref: editor,\n    className: \"\" + defaultClassNames + (className ? \" \" + className : '')\n  }, other));\n});\nReactCodeMirror.displayName = 'CodeMirror';\nexport default ReactCodeMirror;","map":null,"metadata":{},"sourceType":"module"}