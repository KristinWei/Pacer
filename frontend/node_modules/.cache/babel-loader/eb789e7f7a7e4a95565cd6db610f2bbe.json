{"ast":null,"code":"var stringToHTML = function stringToHTML(str) {\n  var parser = new DOMParser();\n  var doc = parser.parseFromString(str, \"text/html\");\n  return doc.body;\n};\n\nfunction runCode(code, language) {\n  var out = null;\n  var err = null;\n\n  if (language === \"javascript\") {\n    var parsedCode = \"\\n \".concat(code, \";\");\n\n    try {\n      var func = new Function(parsedCode);\n      out = String(func());\n      console.log(\"out: \" + out);\n    } catch (error) {\n      console.log(\"err: \" + error);\n      err = String(error);\n    }\n  } else if (language === \"python\") {\n    var pythonDecoder = document.getElementById(\"python-decoder\");\n    pythonDecoder.value = \"\".concat(code);\n    pythonDecoder.dispatchEvent(new Event(\"input\"));\n    var pythonOut = document.getElementById(\"python-out\");\n    console.log(\"out: \" + pythonOut.innerHTML);\n    out = pythonOut.innerHTML;\n    var pythonErr = document.getElementById(\"python-err\");\n    console.log(\"err: \" + pythonErr.innerHTML);\n    err = pythonErr.innerHTML;\n  } else {}\n\n  return {\n    out: out,\n    err: err\n  };\n}\n\nexport default runCode;","map":{"version":3,"names":["stringToHTML","str","parser","DOMParser","doc","parseFromString","body","runCode","code","language","out","err","parsedCode","func","Function","String","console","log","error","pythonDecoder","document","getElementById","value","dispatchEvent","Event","pythonOut","innerHTML","pythonErr"],"sources":["/Users/kw/Desktop/cscc09/project-pacer/frontend/src/_helpers/codeRunner.js"],"sourcesContent":["var stringToHTML = function (str) {\n  var parser = new DOMParser();\n  var doc = parser.parseFromString(str, \"text/html\");\n  return doc.body;\n};\n\nfunction runCode(code, language) {\n  let out = null\n  let err = null\n  if (language === \"javascript\") {\n    const parsedCode = `\\n ${code};`;\n    try {\n      const func = new Function(parsedCode);\n      out = String(func());\n      console.log(\"out: \" + out);\n    } catch (error) {\n      console.log(\"err: \" + error);\n      err = String(error)\n    }\n  } else if (language === \"python\") {\n    const pythonDecoder = document.getElementById(\"python-decoder\");\n    pythonDecoder.value = `${code}`;\n    pythonDecoder.dispatchEvent(new Event(\"input\"));\n    const pythonOut = document.getElementById(\"python-out\");\n    console.log(\"out: \" + pythonOut.innerHTML);\n    out = pythonOut.innerHTML;\n    const pythonErr = document.getElementById(\"python-err\");\n    console.log(\"err: \" + pythonErr.innerHTML);\n    err = pythonErr.innerHTML\n  } else {\n  }\n  return {out, err}\n}\n\nexport default runCode;\n"],"mappings":"AAAA,IAAIA,YAAY,GAAG,SAAfA,YAAe,CAAUC,GAAV,EAAe;EAChC,IAAIC,MAAM,GAAG,IAAIC,SAAJ,EAAb;EACA,IAAIC,GAAG,GAAGF,MAAM,CAACG,eAAP,CAAuBJ,GAAvB,EAA4B,WAA5B,CAAV;EACA,OAAOG,GAAG,CAACE,IAAX;AACD,CAJD;;AAMA,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,QAAvB,EAAiC;EAC/B,IAAIC,GAAG,GAAG,IAAV;EACA,IAAIC,GAAG,GAAG,IAAV;;EACA,IAAIF,QAAQ,KAAK,YAAjB,EAA+B;IAC7B,IAAMG,UAAU,gBAASJ,IAAT,MAAhB;;IACA,IAAI;MACF,IAAMK,IAAI,GAAG,IAAIC,QAAJ,CAAaF,UAAb,CAAb;MACAF,GAAG,GAAGK,MAAM,CAACF,IAAI,EAAL,CAAZ;MACAG,OAAO,CAACC,GAAR,CAAY,UAAUP,GAAtB;IACD,CAJD,CAIE,OAAOQ,KAAP,EAAc;MACdF,OAAO,CAACC,GAAR,CAAY,UAAUC,KAAtB;MACAP,GAAG,GAAGI,MAAM,CAACG,KAAD,CAAZ;IACD;EACF,CAVD,MAUO,IAAIT,QAAQ,KAAK,QAAjB,EAA2B;IAChC,IAAMU,aAAa,GAAGC,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CAAtB;IACAF,aAAa,CAACG,KAAd,aAAyBd,IAAzB;IACAW,aAAa,CAACI,aAAd,CAA4B,IAAIC,KAAJ,CAAU,OAAV,CAA5B;IACA,IAAMC,SAAS,GAAGL,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAlB;IACAL,OAAO,CAACC,GAAR,CAAY,UAAUQ,SAAS,CAACC,SAAhC;IACAhB,GAAG,GAAGe,SAAS,CAACC,SAAhB;IACA,IAAMC,SAAS,GAAGP,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAlB;IACAL,OAAO,CAACC,GAAR,CAAY,UAAUU,SAAS,CAACD,SAAhC;IACAf,GAAG,GAAGgB,SAAS,CAACD,SAAhB;EACD,CAVM,MAUA,CACN;;EACD,OAAO;IAAChB,GAAG,EAAHA,GAAD;IAAMC,GAAG,EAAHA;EAAN,CAAP;AACD;;AAED,eAAeJ,OAAf"},"metadata":{},"sourceType":"module"}