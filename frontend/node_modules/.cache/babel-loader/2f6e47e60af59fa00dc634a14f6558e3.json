{"ast":null,"code":"import _defineProperty from \"/Users/kw/Desktop/cscc09/project-pacer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _foldNodeProp$add;\n\nimport { parser } from '@lezer/java';\nimport { LRLanguage, indentNodeProp, continuedIndent, flatIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n/**\nA language provider based on the [Lezer Java\nparser](https://github.com/lezer-parser/java), extended with\nhighlighting and indentation information.\n*/\n\nvar javaLanguage = /*@__PURE__*/LRLanguage.define({\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      IfStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|else\\b)/\n      }),\n      TryStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|catch|finally)\\b/\n      }),\n      LabeledStatement: flatIndent,\n      SwitchBlock: function SwitchBlock(context) {\n        var after = context.textAfter,\n            closed = /^\\s*\\}/.test(after),\n            isCase = /^\\s*(case|default)\\b/.test(after);\n        return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n      },\n      Block: /*@__PURE__*/delimitedIndent({\n        closing: \"}\"\n      }),\n      BlockComment: function BlockComment() {\n        return -1;\n      },\n      Statement: /*@__PURE__*/continuedIndent({\n        except: /^{/\n      })\n    }), /*@__PURE__*/foldNodeProp.add((_foldNodeProp$add = {}, _defineProperty(_foldNodeProp$add, \"Block SwitchBlock ClassBody ElementValueArrayInitializer ModuleBody EnumBody \" + \"ConstructorBody InterfaceBody ArrayInitializer\", foldInside), _defineProperty(_foldNodeProp$add, \"BlockComment\", function BlockComment(tree) {\n      return {\n        from: tree.from + 2,\n        to: tree.to - 2\n      };\n    }), _foldNodeProp$add))]\n  }),\n  languageData: {\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    },\n    indentOnInput: /^\\s*(?:case |default:|\\{|\\})$/\n  }\n});\n/**\nJava language support.\n*/\n\nfunction java() {\n  return new LanguageSupport(javaLanguage);\n}\n\nexport { java, javaLanguage };","map":null,"metadata":{},"sourceType":"module"}