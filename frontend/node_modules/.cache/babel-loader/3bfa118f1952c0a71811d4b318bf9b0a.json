{"ast":null,"code":"import _slicedToArray from \"/Users/kw/Desktop/cscc09/project-pacer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport { EditorState, StateEffect } from '@codemirror/state';\nimport { indentWithTab } from '@codemirror/commands';\nimport { EditorView, keymap, placeholder } from '@codemirror/view';\nimport { basicSetup } from '@uiw/codemirror-extensions-basic-setup';\nimport { oneDark } from '@codemirror/theme-one-dark';\nimport { getStatistics } from './utils';\nexport function useCodeMirror(props) {\n  var value = props.value,\n      selection = props.selection,\n      onChange = props.onChange,\n      onStatistics = props.onStatistics,\n      onCreateEditor = props.onCreateEditor,\n      onUpdate = props.onUpdate,\n      _props$extensions = props.extensions,\n      extensions = _props$extensions === void 0 ? [] : _props$extensions,\n      autoFocus = props.autoFocus,\n      _props$theme = props.theme,\n      theme = _props$theme === void 0 ? 'light' : _props$theme,\n      _props$height = props.height,\n      height = _props$height === void 0 ? '' : _props$height,\n      _props$minHeight = props.minHeight,\n      minHeight = _props$minHeight === void 0 ? '' : _props$minHeight,\n      _props$maxHeight = props.maxHeight,\n      maxHeight = _props$maxHeight === void 0 ? '' : _props$maxHeight,\n      _props$placeholder = props.placeholder,\n      placeholderStr = _props$placeholder === void 0 ? '' : _props$placeholder,\n      _props$width = props.width,\n      width = _props$width === void 0 ? '' : _props$width,\n      _props$minWidth = props.minWidth,\n      minWidth = _props$minWidth === void 0 ? '' : _props$minWidth,\n      _props$maxWidth = props.maxWidth,\n      maxWidth = _props$maxWidth === void 0 ? '' : _props$maxWidth,\n      _props$editable = props.editable,\n      editable = _props$editable === void 0 ? true : _props$editable,\n      _props$readOnly = props.readOnly,\n      readOnly = _props$readOnly === void 0 ? false : _props$readOnly,\n      _props$indentWithTab = props.indentWithTab,\n      defaultIndentWithTab = _props$indentWithTab === void 0 ? true : _props$indentWithTab,\n      _props$basicSetup = props.basicSetup,\n      defaultBasicSetup = _props$basicSetup === void 0 ? true : _props$basicSetup,\n      root = props.root;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      container = _useState2[0],\n      setContainer = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      view = _useState4[0],\n      setView = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      state = _useState6[0],\n      setState = _useState6[1];\n\n  var defaultLightThemeOption = EditorView.theme({\n    '&': {\n      backgroundColor: '#fff'\n    }\n  }, {\n    dark: false\n  });\n  var defaultThemeOption = EditorView.theme({\n    '&': {\n      height: height,\n      minHeight: minHeight,\n      maxHeight: maxHeight,\n      width: width,\n      minWidth: minWidth,\n      maxWidth: maxWidth\n    }\n  });\n  var updateListener = EditorView.updateListener.of(function (vu) {\n    if (vu.docChanged && typeof onChange === 'function') {\n      var doc = vu.state.doc;\n\n      var _value = doc.toString();\n\n      onChange(_value, vu);\n    }\n\n    onStatistics && onStatistics(getStatistics(vu));\n  });\n  var getExtensions = [updateListener, defaultThemeOption];\n\n  if (defaultIndentWithTab) {\n    getExtensions.unshift(keymap.of([indentWithTab]));\n  }\n\n  if (defaultBasicSetup) {\n    if (typeof defaultBasicSetup === 'boolean') {\n      getExtensions.unshift(basicSetup());\n    } else {\n      getExtensions.unshift(basicSetup(defaultBasicSetup));\n    }\n  }\n\n  if (placeholderStr) {\n    getExtensions.unshift(placeholder(placeholderStr));\n  }\n\n  switch (theme) {\n    case 'light':\n      getExtensions.push(defaultLightThemeOption);\n      break;\n\n    case 'dark':\n      getExtensions.push(oneDark);\n      break;\n\n    default:\n      getExtensions.push(theme);\n      break;\n  }\n\n  if (editable === false) {\n    getExtensions.push(EditorView.editable.of(false));\n  }\n\n  if (readOnly) {\n    getExtensions.push(EditorState.readOnly.of(true));\n  }\n\n  if (onUpdate && typeof onUpdate === 'function') {\n    getExtensions.push(EditorView.updateListener.of(onUpdate));\n  }\n\n  getExtensions = getExtensions.concat(extensions);\n  useEffect(function () {\n    if (container && !state) {\n      var stateCurrent = EditorState.create({\n        doc: value,\n        selection: selection,\n        extensions: getExtensions\n      });\n      setState(stateCurrent);\n\n      if (!view) {\n        var viewCurrent = new EditorView({\n          state: stateCurrent,\n          parent: container,\n          root: root\n        });\n        setView(viewCurrent);\n        onCreateEditor && onCreateEditor(viewCurrent, stateCurrent);\n      }\n    }\n\n    return function () {\n      if (view) {\n        setState(undefined);\n        setView(undefined);\n      }\n    };\n  }, [container, state]);\n  useEffect(function () {\n    return setContainer(props.container);\n  }, [props.container]);\n  useEffect(function () {\n    return function () {\n      if (view) {\n        view.destroy();\n        setView(undefined);\n      }\n    };\n  }, [view]);\n  useEffect(function () {\n    if (autoFocus && view) {\n      view.focus();\n    }\n  }, [autoFocus, view]);\n  useEffect(function () {\n    if (view) {\n      view.dispatch({\n        effects: StateEffect.reconfigure.of(getExtensions)\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [theme, extensions, height, minHeight, maxHeight, width, minWidth, maxWidth, placeholderStr, editable, readOnly, defaultIndentWithTab, defaultBasicSetup, onChange, onUpdate]);\n  useEffect(function () {\n    var currentValue = view ? view.state.doc.toString() : '';\n\n    if (view && value !== currentValue) {\n      view.dispatch({\n        changes: {\n          from: 0,\n          to: currentValue.length,\n          insert: value || ''\n        }\n      });\n    }\n  }, [value, view]);\n  return {\n    state: state,\n    setState: setState,\n    view: view,\n    setView: setView,\n    container: container,\n    setContainer: setContainer\n  };\n}","map":null,"metadata":{},"sourceType":"module"}