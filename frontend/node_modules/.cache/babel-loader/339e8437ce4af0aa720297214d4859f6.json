{"ast":null,"code":"import _classCallCheck from \"/Users/kw/Desktop/cscc09/project-pacer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kw/Desktop/cscc09/project-pacer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Annotation, Facet, combineConfig, StateField, EditorSelection, Transaction, ChangeSet, ChangeDesc, StateEffect, Text, findClusterBreak, countColumn, CharCategory } from '@codemirror/state';\nimport { EditorView, Direction } from '@codemirror/view';\nimport { IndentContext, getIndentation, indentString, indentUnit, getIndentUnit, matchBrackets, syntaxTree } from '@codemirror/language';\nimport { NodeProp } from '@lezer/common';\n/**\nComment or uncomment the current selection. Will use line comments\nif available, otherwise falling back to block comments.\n*/\n\nvar toggleComment = function toggleComment(target) {\n  var config = getConfig(target.state);\n  return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;\n};\n\nfunction command(f, option) {\n  return function (_ref) {\n    var state = _ref.state,\n        dispatch = _ref.dispatch;\n    if (state.readOnly) return false;\n    var tr = f(option, state);\n    if (!tr) return false;\n    dispatch(state.update(tr));\n    return true;\n  };\n}\n/**\nComment or uncomment the current selection using line comments.\nThe line comment syntax is taken from the\n[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).\n*/\n\n\nvar toggleLineComment = /*@__PURE__*/command(changeLineComment, 0\n/* Toggle */\n);\n/**\nComment the current selection using line comments.\n*/\n\nvar lineComment = /*@__PURE__*/command(changeLineComment, 1\n/* Comment */\n);\n/**\nUncomment the current selection using line comments.\n*/\n\nvar lineUncomment = /*@__PURE__*/command(changeLineComment, 2\n/* Uncomment */\n);\n/**\nComment or uncomment the current selection using block comments.\nThe block comment syntax is taken from the\n[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).\n*/\n\nvar toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0\n/* Toggle */\n);\n/**\nComment the current selection using block comments.\n*/\n\nvar blockComment = /*@__PURE__*/command(changeBlockComment, 1\n/* Comment */\n);\n/**\nUncomment the current selection using block comments.\n*/\n\nvar blockUncomment = /*@__PURE__*/command(changeBlockComment, 2\n/* Uncomment */\n);\n/**\nComment or uncomment the lines around the current selection using\nblock comments.\n*/\n\nvar toggleBlockCommentByLine = /*@__PURE__*/command(function (o, s) {\n  return changeBlockComment(o, s, selectedLineRanges(s));\n}, 0\n/* Toggle */\n);\n\nfunction getConfig(state) {\n  var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : state.selection.main.head;\n  var data = state.languageDataAt(\"commentTokens\", pos);\n  return data.length ? data[0] : {};\n}\n\nvar SearchMargin = 50;\n/**\nDetermines if the given range is block-commented in the given\nstate.\n*/\n\nfunction findBlockComment(state, _ref2, from, to) {\n  var open = _ref2.open,\n      close = _ref2.close;\n  var textBefore = state.sliceDoc(from - SearchMargin, from);\n  var textAfter = state.sliceDoc(to, to + SearchMargin);\n  var spaceBefore = /\\s*$/.exec(textBefore)[0].length,\n      spaceAfter = /^\\s*/.exec(textAfter)[0].length;\n  var beforeOff = textBefore.length - spaceBefore;\n\n  if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {\n    return {\n      open: {\n        pos: from - spaceBefore,\n        margin: spaceBefore && 1\n      },\n      close: {\n        pos: to + spaceAfter,\n        margin: spaceAfter && 1\n      }\n    };\n  }\n\n  var startText, endText;\n\n  if (to - from <= 2 * SearchMargin) {\n    startText = endText = state.sliceDoc(from, to);\n  } else {\n    startText = state.sliceDoc(from, from + SearchMargin);\n    endText = state.sliceDoc(to - SearchMargin, to);\n  }\n\n  var startSpace = /^\\s*/.exec(startText)[0].length,\n      endSpace = /\\s*$/.exec(endText)[0].length;\n  var endOff = endText.length - endSpace - close.length;\n\n  if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close.length) == close) {\n    return {\n      open: {\n        pos: from + startSpace + open.length,\n        margin: /\\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0\n      },\n      close: {\n        pos: to - endSpace - close.length,\n        margin: /\\s/.test(endText.charAt(endOff - 1)) ? 1 : 0\n      }\n    };\n  }\n\n  return null;\n}\n\nfunction selectedLineRanges(state) {\n  var ranges = [];\n\n  var _iterator = _createForOfIteratorHelper(state.selection.ranges),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var r = _step.value;\n      var fromLine = state.doc.lineAt(r.from);\n      var toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);\n      var last = ranges.length - 1;\n      if (last >= 0 && ranges[last].to > fromLine.from) ranges[last].to = toLine.to;else ranges.push({\n        from: fromLine.from,\n        to: toLine.to\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return ranges;\n} // Performs toggle, comment and uncomment of block comments in\n// languages that support them.\n\n\nfunction changeBlockComment(option, state) {\n  var ranges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : state.selection.ranges;\n  var tokens = ranges.map(function (r) {\n    return getConfig(state, r.from).block;\n  });\n  if (!tokens.every(function (c) {\n    return c;\n  })) return null;\n  var comments = ranges.map(function (r, i) {\n    return findBlockComment(state, tokens[i], r.from, r.to);\n  });\n\n  if (option != 2\n  /* Uncomment */\n  && !comments.every(function (c) {\n    return c;\n  })) {\n    return {\n      changes: state.changes(ranges.map(function (range, i) {\n        if (comments[i]) return [];\n        return [{\n          from: range.from,\n          insert: tokens[i].open + \" \"\n        }, {\n          from: range.to,\n          insert: \" \" + tokens[i].close\n        }];\n      }))\n    };\n  } else if (option != 1\n  /* Comment */\n  && comments.some(function (c) {\n    return c;\n  })) {\n    var changes = [];\n\n    for (var i = 0, comment; i < comments.length; i++) {\n      if (comment = comments[i]) {\n        var token = tokens[i],\n            _comment = comment,\n            open = _comment.open,\n            close = _comment.close;\n        changes.push({\n          from: open.pos - token.open.length,\n          to: open.pos + open.margin\n        }, {\n          from: close.pos - close.margin,\n          to: close.pos + token.close.length\n        });\n      }\n    }\n\n    return {\n      changes: changes\n    };\n  }\n\n  return null;\n} // Performs toggle, comment and uncomment of line comments.\n\n\nfunction changeLineComment(option, state) {\n  var ranges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : state.selection.ranges;\n  var lines = [];\n  var prevLine = -1;\n\n  var _iterator2 = _createForOfIteratorHelper(ranges),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _step2$value = _step2.value,\n          _from = _step2$value.from,\n          _to = _step2$value.to;\n      var startI = lines.length,\n          minIndent = 1e9;\n\n      for (var pos = _from; pos <= _to;) {\n        var _line2 = state.doc.lineAt(pos);\n\n        if (_line2.from > prevLine && (_from == _to || _to > _line2.from)) {\n          prevLine = _line2.from;\n          var _token2 = getConfig(state, pos).line;\n          if (!_token2) continue;\n          var _indent = /^\\s*/.exec(_line2.text)[0].length;\n\n          var _empty = _indent == _line2.length;\n\n          var _comment2 = _line2.text.slice(_indent, _indent + _token2.length) == _token2 ? _indent : -1;\n\n          if (_indent < _line2.text.length && _indent < minIndent) minIndent = _indent;\n          lines.push({\n            line: _line2,\n            comment: _comment2,\n            token: _token2,\n            indent: _indent,\n            empty: _empty,\n            single: false\n          });\n        }\n\n        pos = _line2.to + 1;\n      }\n\n      if (minIndent < 1e9) for (var i = startI; i < lines.length; i++) {\n        if (lines[i].indent < lines[i].line.text.length) lines[i].indent = minIndent;\n      }\n      if (lines.length == startI + 1) lines[startI].single = true;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  if (option != 2\n  /* Uncomment */\n  && lines.some(function (l) {\n    return l.comment < 0 && (!l.empty || l.single);\n  })) {\n    var changes = [];\n\n    var _iterator3 = _createForOfIteratorHelper(lines),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _step3$value = _step3.value,\n            line = _step3$value.line,\n            token = _step3$value.token,\n            indent = _step3$value.indent,\n            empty = _step3$value.empty,\n            single = _step3$value.single;\n        if (single || !empty) changes.push({\n          from: line.from + indent,\n          insert: token + \" \"\n        });\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    var changeSet = state.changes(changes);\n    return {\n      changes: changeSet,\n      selection: state.selection.map(changeSet, 1)\n    };\n  } else if (option != 1\n  /* Comment */\n  && lines.some(function (l) {\n    return l.comment >= 0;\n  })) {\n    var _changes = [];\n\n    var _iterator4 = _createForOfIteratorHelper(lines),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var _step4$value = _step4.value,\n            _line = _step4$value.line,\n            comment = _step4$value.comment,\n            _token = _step4$value.token;\n\n        if (comment >= 0) {\n          var from = _line.from + comment,\n              to = from + _token.length;\n          if (_line.text[to - _line.from] == \" \") to++;\n\n          _changes.push({\n            from: from,\n            to: to\n          });\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    return {\n      changes: _changes\n    };\n  }\n\n  return null;\n}\n\nvar fromHistory = /*@__PURE__*/Annotation.define();\n/**\nTransaction annotation that will prevent that transaction from\nbeing combined with other transactions in the undo history. Given\n`\"before\"`, it'll prevent merging with previous transactions. With\n`\"after\"`, subsequent transactions won't be combined with this\none. With `\"full\"`, the transaction is isolated on both sides.\n*/\n\nvar isolateHistory = /*@__PURE__*/Annotation.define();\n/**\nThis facet provides a way to register functions that, given a\ntransaction, provide a set of effects that the history should\nstore when inverting the transaction. This can be used to\nintegrate some kinds of effects in the history, so that they can\nbe undone (and redone again).\n*/\n\nvar invertedEffects = /*@__PURE__*/Facet.define();\nvar historyConfig = /*@__PURE__*/Facet.define({\n  combine: function combine(configs) {\n    return combineConfig(configs, {\n      minDepth: 100,\n      newGroupDelay: 500\n    }, {\n      minDepth: Math.max,\n      newGroupDelay: Math.min\n    });\n  }\n});\n\nfunction changeEnd(changes) {\n  var end = 0;\n  changes.iterChangedRanges(function (_, to) {\n    return end = to;\n  });\n  return end;\n}\n\nvar historyField_ = /*@__PURE__*/StateField.define({\n  create: function create() {\n    return HistoryState.empty;\n  },\n  update: function update(state, tr) {\n    var config = tr.state.facet(historyConfig);\n    var fromHist = tr.annotation(fromHistory);\n\n    if (fromHist) {\n      var selection = tr.docChanged ? EditorSelection.single(changeEnd(tr.changes)) : undefined;\n      var item = HistEvent.fromTransaction(tr, selection),\n          from = fromHist.side;\n      var other = from == 0\n      /* Done */\n      ? state.undone : state.done;\n      if (item) other = updateBranch(other, other.length, config.minDepth, item);else other = _addSelection(other, tr.startState.selection);\n      return new HistoryState(from == 0\n      /* Done */\n      ? fromHist.rest : other, from == 0\n      /* Done */\n      ? other : fromHist.rest);\n    }\n\n    var isolate = tr.annotation(isolateHistory);\n    if (isolate == \"full\" || isolate == \"before\") state = state.isolate();\n    if (tr.annotation(Transaction.addToHistory) === false) return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;\n    var event = HistEvent.fromTransaction(tr);\n    var time = tr.annotation(Transaction.time),\n        userEvent = tr.annotation(Transaction.userEvent);\n    if (event) state = state.addChanges(event, time, userEvent, config.newGroupDelay, config.minDepth);else if (tr.selection) state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);\n    if (isolate == \"full\" || isolate == \"after\") state = state.isolate();\n    return state;\n  },\n  toJSON: function toJSON(value) {\n    return {\n      done: value.done.map(function (e) {\n        return e.toJSON();\n      }),\n      undone: value.undone.map(function (e) {\n        return e.toJSON();\n      })\n    };\n  },\n  fromJSON: function fromJSON(json) {\n    return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));\n  }\n});\n/**\nCreate a history extension with the given configuration.\n*/\n\nfunction history() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return [historyField_, historyConfig.of(config), EditorView.domEventHandlers({\n    beforeinput: function beforeinput(e, view) {\n      var command = e.inputType == \"historyUndo\" ? undo : e.inputType == \"historyRedo\" ? redo : null;\n      if (!command) return false;\n      e.preventDefault();\n      return command(view);\n    }\n  })];\n}\n/**\nThe state field used to store the history data. Should probably\nonly be used when you want to\n[serialize](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) or\n[deserialize](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) state objects in a way\nthat preserves history.\n*/\n\n\nvar historyField = historyField_;\n\nfunction cmd(side, selection) {\n  return function (_ref3) {\n    var state = _ref3.state,\n        dispatch = _ref3.dispatch;\n    if (!selection && state.readOnly) return false;\n    var historyState = state.field(historyField_, false);\n    if (!historyState) return false;\n    var tr = historyState.pop(side, state, selection);\n    if (!tr) return false;\n    dispatch(tr);\n    return true;\n  };\n}\n/**\nUndo a single group of history events. Returns false if no group\nwas available.\n*/\n\n\nvar undo = /*@__PURE__*/cmd(0\n/* Done */\n, false);\n/**\nRedo a group of history events. Returns false if no group was\navailable.\n*/\n\nvar redo = /*@__PURE__*/cmd(1\n/* Undone */\n, false);\n/**\nUndo a change or selection change.\n*/\n\nvar undoSelection = /*@__PURE__*/cmd(0\n/* Done */\n, true);\n/**\nRedo a change or selection change.\n*/\n\nvar redoSelection = /*@__PURE__*/cmd(1\n/* Undone */\n, true);\n\nfunction depth(side) {\n  return function (state) {\n    var histState = state.field(historyField_, false);\n    if (!histState) return 0;\n    var branch = side == 0\n    /* Done */\n    ? histState.done : histState.undone;\n    return branch.length - (branch.length && !branch[0].changes ? 1 : 0);\n  };\n}\n/**\nThe amount of undoable change events available in a given state.\n*/\n\n\nvar undoDepth = /*@__PURE__*/depth(0\n/* Done */\n);\n/**\nThe amount of redoable change events available in a given state.\n*/\n\nvar redoDepth = /*@__PURE__*/depth(1\n/* Undone */\n); // History events store groups of changes or effects that need to be\n// undone/redone together.\n\nvar HistEvent = /*#__PURE__*/function () {\n  function HistEvent( // The changes in this event. Normal events hold at least one\n  // change or effect. But it may be necessary to store selection\n  // events before the first change, in which case a special type of\n  // instance is created which doesn't hold any changes, with\n  // changes == startSelection == undefined\n  changes, // The effects associated with this event\n  effects, // Accumulated mapping (from addToHistory==false) that should be\n  // applied to events below this one.\n  mapped, // The selection before this event\n  startSelection, // Stores selection changes after this event, to be used for\n  // selection undo/redo.\n  selectionsAfter) {\n    _classCallCheck(this, HistEvent);\n\n    this.changes = changes;\n    this.effects = effects;\n    this.mapped = mapped;\n    this.startSelection = startSelection;\n    this.selectionsAfter = selectionsAfter;\n  }\n\n  _createClass(HistEvent, [{\n    key: \"setSelAfter\",\n    value: function setSelAfter(after) {\n      return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _a, _b, _c;\n\n      return {\n        changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),\n        mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),\n        startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),\n        selectionsAfter: this.selectionsAfter.map(function (s) {\n          return s.toJSON();\n        })\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));\n    } // This does not check `addToHistory` and such, it assumes the\n    // transaction needs to be converted to an item. Returns null when\n    // there are no changes or effects in the transaction.\n\n  }, {\n    key: \"fromTransaction\",\n    value: function fromTransaction(tr, selection) {\n      var effects = none;\n\n      var _iterator5 = _createForOfIteratorHelper(tr.startState.facet(invertedEffects)),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var invert = _step5.value;\n          var result = invert(tr);\n          if (result.length) effects = effects.concat(result);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      if (!effects.length && tr.changes.empty) return null;\n      return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none);\n    }\n  }, {\n    key: \"selection\",\n    value: function selection(selections) {\n      return new HistEvent(undefined, none, undefined, undefined, selections);\n    }\n  }]);\n\n  return HistEvent;\n}();\n\nfunction updateBranch(branch, to, maxLen, newEvent) {\n  var start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;\n  var newBranch = branch.slice(start, to);\n  newBranch.push(newEvent);\n  return newBranch;\n}\n\nfunction isAdjacent(a, b) {\n  var ranges = [],\n      isAdjacent = false;\n  a.iterChangedRanges(function (f, t) {\n    return ranges.push(f, t);\n  });\n  b.iterChangedRanges(function (_f, _t, f, t) {\n    for (var i = 0; i < ranges.length;) {\n      var from = ranges[i++],\n          to = ranges[i++];\n      if (t >= from && f <= to) isAdjacent = true;\n    }\n  });\n  return isAdjacent;\n}\n\nfunction eqSelectionShape(a, b) {\n  return a.ranges.length == b.ranges.length && a.ranges.filter(function (r, i) {\n    return r.empty != b.ranges[i].empty;\n  }).length === 0;\n}\n\nfunction conc(a, b) {\n  return !a.length ? b : !b.length ? a : a.concat(b);\n}\n\nvar none = [];\nvar MaxSelectionsPerEvent = 200;\n\nfunction _addSelection(branch, selection) {\n  if (!branch.length) {\n    return [HistEvent.selection([selection])];\n  } else {\n    var lastEvent = branch[branch.length - 1];\n    var sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));\n    if (sels.length && sels[sels.length - 1].eq(selection)) return branch;\n    sels.push(selection);\n    return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));\n  }\n} // Assumes the top item has one or more selectionAfter values\n\n\nfunction popSelection(branch) {\n  var last = branch[branch.length - 1];\n  var newBranch = branch.slice();\n  newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));\n  return newBranch;\n} // Add a mapping to the top event in the given branch. If this maps\n// away all the changes and effects in that item, drop it and\n// propagate the mapping to the next item.\n\n\nfunction addMappingToBranch(branch, mapping) {\n  if (!branch.length) return branch;\n  var length = branch.length,\n      selections = none;\n\n  while (length) {\n    var event = mapEvent(branch[length - 1], mapping, selections);\n\n    if (event.changes && !event.changes.empty || event.effects.length) {\n      // Event survived mapping\n      var result = branch.slice(0, length);\n      result[length - 1] = event;\n      return result;\n    } else {\n      // Drop this event, since there's no changes or effects left\n      mapping = event.mapped;\n      length--;\n      selections = event.selectionsAfter;\n    }\n  }\n\n  return selections.length ? [HistEvent.selection(selections)] : none;\n}\n\nfunction mapEvent(event, mapping, extraSelections) {\n  var selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(function (s) {\n    return s.map(mapping);\n  }) : none, extraSelections); // Change-less events don't store mappings (they are always the last event in a branch)\n\n  if (!event.changes) return HistEvent.selection(selections);\n  var mappedChanges = event.changes.map(mapping),\n      before = mapping.mapDesc(event.changes, true);\n  var fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;\n  return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);\n}\n\nvar joinableUserEvent = /^(input\\.type|delete)($|\\.)/;\n\nvar HistoryState = /*#__PURE__*/function () {\n  function HistoryState(done, undone) {\n    var prevTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var prevUserEvent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n\n    _classCallCheck(this, HistoryState);\n\n    this.done = done;\n    this.undone = undone;\n    this.prevTime = prevTime;\n    this.prevUserEvent = prevUserEvent;\n  }\n\n  _createClass(HistoryState, [{\n    key: \"isolate\",\n    value: function isolate() {\n      return this.prevTime ? new HistoryState(this.done, this.undone) : this;\n    }\n  }, {\n    key: \"addChanges\",\n    value: function addChanges(event, time, userEvent, newGroupDelay, maxLen) {\n      var done = this.done,\n          lastEvent = done[done.length - 1];\n\n      if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes && (!userEvent || joinableUserEvent.test(userEvent)) && (!lastEvent.selectionsAfter.length && time - this.prevTime < newGroupDelay && isAdjacent(lastEvent.changes, event.changes) || // For compose (but not compose.start) events, always join with previous event\n      userEvent == \"input.type.compose\")) {\n        done = updateBranch(done, done.length - 1, maxLen, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));\n      } else {\n        done = updateBranch(done, done.length, maxLen, event);\n      }\n\n      return new HistoryState(done, none, time, userEvent);\n    }\n  }, {\n    key: \"addSelection\",\n    value: function addSelection(selection, time, userEvent, newGroupDelay) {\n      var last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;\n      if (last.length > 0 && time - this.prevTime < newGroupDelay && userEvent == this.prevUserEvent && userEvent && /^select($|\\.)/.test(userEvent) && eqSelectionShape(last[last.length - 1], selection)) return this;\n      return new HistoryState(_addSelection(this.done, selection), this.undone, time, userEvent);\n    }\n  }, {\n    key: \"addMapping\",\n    value: function addMapping(mapping) {\n      return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);\n    }\n  }, {\n    key: \"pop\",\n    value: function pop(side, state, selection) {\n      var branch = side == 0\n      /* Done */\n      ? this.done : this.undone;\n      if (branch.length == 0) return null;\n      var event = branch[branch.length - 1];\n\n      if (selection && event.selectionsAfter.length) {\n        return state.update({\n          selection: event.selectionsAfter[event.selectionsAfter.length - 1],\n          annotations: fromHistory.of({\n            side: side,\n            rest: popSelection(branch)\n          }),\n          userEvent: side == 0\n          /* Done */\n          ? \"select.undo\" : \"select.redo\",\n          scrollIntoView: true\n        });\n      } else if (!event.changes) {\n        return null;\n      } else {\n        var rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1);\n        if (event.mapped) rest = addMappingToBranch(rest, event.mapped);\n        return state.update({\n          changes: event.changes,\n          selection: event.startSelection,\n          effects: event.effects,\n          annotations: fromHistory.of({\n            side: side,\n            rest: rest\n          }),\n          filter: false,\n          userEvent: side == 0\n          /* Done */\n          ? \"undo\" : \"redo\",\n          scrollIntoView: true\n        });\n      }\n    }\n  }]);\n\n  return HistoryState;\n}();\n\nHistoryState.empty = /*@__PURE__*/new HistoryState(none, none);\n/**\nDefault key bindings for the undo history.\n\n- Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).\n- Mod-y (Mod-Shift-z on macOS) + Ctrl-Shift-z on Linux: [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).\n- Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).\n- Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).\n*/\n\nvar historyKeymap = [{\n  key: \"Mod-z\",\n  run: undo,\n  preventDefault: true\n}, {\n  key: \"Mod-y\",\n  mac: \"Mod-Shift-z\",\n  run: redo,\n  preventDefault: true\n}, {\n  linux: \"Ctrl-Shift-z\",\n  run: redo,\n  preventDefault: true\n}, {\n  key: \"Mod-u\",\n  run: undoSelection,\n  preventDefault: true\n}, {\n  key: \"Alt-u\",\n  mac: \"Mod-Shift-u\",\n  run: redoSelection,\n  preventDefault: true\n}];\n\nfunction updateSel(sel, by) {\n  return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);\n}\n\nfunction setSel(state, selection) {\n  return state.update({\n    selection: selection,\n    scrollIntoView: true,\n    userEvent: \"select\"\n  });\n}\n\nfunction moveSel(_ref4, how) {\n  var state = _ref4.state,\n      dispatch = _ref4.dispatch;\n  var selection = updateSel(state.selection, how);\n  if (selection.eq(state.selection)) return false;\n  dispatch(setSel(state, selection));\n  return true;\n}\n\nfunction rangeEnd(range, forward) {\n  return EditorSelection.cursor(forward ? range.to : range.from);\n}\n\nfunction cursorByChar(view, forward) {\n  return moveSel(view, function (range) {\n    return range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward);\n  });\n}\n\nfunction ltrAtCursor(view) {\n  return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;\n}\n/**\nMove the selection one character to the left (which is backward in\nleft-to-right text, forward in right-to-left text).\n*/\n\n\nvar cursorCharLeft = function cursorCharLeft(view) {\n  return cursorByChar(view, !ltrAtCursor(view));\n};\n/**\nMove the selection one character to the right.\n*/\n\n\nvar cursorCharRight = function cursorCharRight(view) {\n  return cursorByChar(view, ltrAtCursor(view));\n};\n/**\nMove the selection one character forward.\n*/\n\n\nvar cursorCharForward = function cursorCharForward(view) {\n  return cursorByChar(view, true);\n};\n/**\nMove the selection one character backward.\n*/\n\n\nvar cursorCharBackward = function cursorCharBackward(view) {\n  return cursorByChar(view, false);\n};\n\nfunction cursorByGroup(view, forward) {\n  return moveSel(view, function (range) {\n    return range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward);\n  });\n}\n/**\nMove the selection to the left across one group of word or\nnon-word (but also non-space) characters.\n*/\n\n\nvar cursorGroupLeft = function cursorGroupLeft(view) {\n  return cursorByGroup(view, !ltrAtCursor(view));\n};\n/**\nMove the selection one group to the right.\n*/\n\n\nvar cursorGroupRight = function cursorGroupRight(view) {\n  return cursorByGroup(view, ltrAtCursor(view));\n};\n/**\nMove the selection one group forward.\n*/\n\n\nvar cursorGroupForward = function cursorGroupForward(view) {\n  return cursorByGroup(view, true);\n};\n/**\nMove the selection one group backward.\n*/\n\n\nvar cursorGroupBackward = function cursorGroupBackward(view) {\n  return cursorByGroup(view, false);\n};\n\nfunction moveBySubword(view, range, forward) {\n  var categorize = view.state.charCategorizer(range.from);\n  return view.moveByChar(range, forward, function (start) {\n    var cat = CharCategory.Space,\n        pos = range.from;\n    var done = false,\n        sawUpper = false,\n        sawLower = false;\n\n    var step = function step(next) {\n      if (done) return false;\n      pos += forward ? next.length : -next.length;\n      var nextCat = categorize(next),\n          ahead;\n      if (cat == CharCategory.Space) cat = nextCat;\n      if (cat != nextCat) return false;\n\n      if (cat == CharCategory.Word) {\n        if (next.toLowerCase() == next) {\n          if (!forward && sawUpper) return false;\n          sawLower = true;\n        } else if (sawLower) {\n          if (forward) return false;\n          done = true;\n        } else {\n          if (sawUpper && forward && categorize(ahead = view.state.sliceDoc(pos, pos + 1)) == CharCategory.Word && ahead.toLowerCase() == ahead) return false;\n          sawUpper = true;\n        }\n      }\n\n      return true;\n    };\n\n    step(start);\n    return step;\n  });\n}\n\nfunction cursorBySubword(view, forward) {\n  return moveSel(view, function (range) {\n    return range.empty ? moveBySubword(view, range, forward) : rangeEnd(range, forward);\n  });\n}\n/**\nMove the selection one group or camel-case subword forward.\n*/\n\n\nvar cursorSubwordForward = function cursorSubwordForward(view) {\n  return cursorBySubword(view, true);\n};\n/**\nMove the selection one group or camel-case subword backward.\n*/\n\n\nvar cursorSubwordBackward = function cursorSubwordBackward(view) {\n  return cursorBySubword(view, false);\n};\n\nfunction interestingNode(state, node, bracketProp) {\n  if (node.type.prop(bracketProp)) return true;\n  var len = node.to - node.from;\n  return len && (len > 2 || /[^\\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;\n}\n\nfunction moveBySyntax(state, start, forward) {\n  var pos = syntaxTree(state).resolveInner(start.head);\n  var bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy; // Scan forward through child nodes to see if there's an interesting\n  // node ahead.\n\n  for (var at = start.head;;) {\n    var next = forward ? pos.childAfter(at) : pos.childBefore(at);\n    if (!next) break;\n    if (interestingNode(state, next, bracketProp)) pos = next;else at = forward ? next.to : next.from;\n  }\n\n  var bracket = pos.type.prop(bracketProp),\n      match,\n      newPos;\n  if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched) newPos = forward ? match.end.to : match.end.from;else newPos = forward ? pos.to : pos.from;\n  return EditorSelection.cursor(newPos, forward ? -1 : 1);\n}\n/**\nMove the cursor over the next syntactic element to the left.\n*/\n\n\nvar cursorSyntaxLeft = function cursorSyntaxLeft(view) {\n  return moveSel(view, function (range) {\n    return moveBySyntax(view.state, range, !ltrAtCursor(view));\n  });\n};\n/**\nMove the cursor over the next syntactic element to the right.\n*/\n\n\nvar cursorSyntaxRight = function cursorSyntaxRight(view) {\n  return moveSel(view, function (range) {\n    return moveBySyntax(view.state, range, ltrAtCursor(view));\n  });\n};\n\nfunction cursorByLine(view, forward) {\n  return moveSel(view, function (range) {\n    if (!range.empty) return rangeEnd(range, forward);\n    var moved = view.moveVertically(range, forward);\n    return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);\n  });\n}\n/**\nMove the selection one line up.\n*/\n\n\nvar cursorLineUp = function cursorLineUp(view) {\n  return cursorByLine(view, false);\n};\n/**\nMove the selection one line down.\n*/\n\n\nvar cursorLineDown = function cursorLineDown(view) {\n  return cursorByLine(view, true);\n};\n\nfunction pageHeight(view) {\n  return Math.max(view.defaultLineHeight, Math.min(view.dom.clientHeight, innerHeight) - 5);\n}\n\nfunction cursorByPage(view, forward) {\n  var state = view.state,\n      selection = updateSel(state.selection, function (range) {\n    return range.empty ? view.moveVertically(range, forward, pageHeight(view)) : rangeEnd(range, forward);\n  });\n  if (selection.eq(state.selection)) return false;\n  var startPos = view.coordsAtPos(state.selection.main.head);\n  var scrollRect = view.scrollDOM.getBoundingClientRect();\n  var effect;\n  if (startPos && startPos.top > scrollRect.top && startPos.bottom < scrollRect.bottom && startPos.top - scrollRect.top <= view.scrollDOM.scrollHeight - view.scrollDOM.scrollTop - view.scrollDOM.clientHeight) effect = EditorView.scrollIntoView(selection.main.head, {\n    y: \"start\",\n    yMargin: startPos.top - scrollRect.top\n  });\n  view.dispatch(setSel(state, selection), {\n    effects: effect\n  });\n  return true;\n}\n/**\nMove the selection one page up.\n*/\n\n\nvar cursorPageUp = function cursorPageUp(view) {\n  return cursorByPage(view, false);\n};\n/**\nMove the selection one page down.\n*/\n\n\nvar cursorPageDown = function cursorPageDown(view) {\n  return cursorByPage(view, true);\n};\n\nfunction moveByLineBoundary(view, start, forward) {\n  var line = view.lineBlockAt(start.head),\n      moved = view.moveToLineBoundary(start, forward);\n  if (moved.head == start.head && moved.head != (forward ? line.to : line.from)) moved = view.moveToLineBoundary(start, forward, false);\n\n  if (!forward && moved.head == line.from && line.length) {\n    var space = /^\\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;\n    if (space && start.head != line.from + space) moved = EditorSelection.cursor(line.from + space);\n  }\n\n  return moved;\n}\n/**\nMove the selection to the next line wrap point, or to the end of\nthe line if there isn't one left on this line.\n*/\n\n\nvar cursorLineBoundaryForward = function cursorLineBoundaryForward(view) {\n  return moveSel(view, function (range) {\n    return moveByLineBoundary(view, range, true);\n  });\n};\n/**\nMove the selection to previous line wrap point, or failing that to\nthe start of the line. If the line is indented, and the cursor\nisn't already at the end of the indentation, this will move to the\nend of the indentation instead of the start of the line.\n*/\n\n\nvar cursorLineBoundaryBackward = function cursorLineBoundaryBackward(view) {\n  return moveSel(view, function (range) {\n    return moveByLineBoundary(view, range, false);\n  });\n};\n/**\nMove the selection to the start of the line.\n*/\n\n\nvar cursorLineStart = function cursorLineStart(view) {\n  return moveSel(view, function (range) {\n    return EditorSelection.cursor(view.lineBlockAt(range.head).from, 1);\n  });\n};\n/**\nMove the selection to the end of the line.\n*/\n\n\nvar cursorLineEnd = function cursorLineEnd(view) {\n  return moveSel(view, function (range) {\n    return EditorSelection.cursor(view.lineBlockAt(range.head).to, -1);\n  });\n};\n\nfunction toMatchingBracket(state, dispatch, extend) {\n  var found = false,\n      selection = updateSel(state.selection, function (range) {\n    var matching = matchBrackets(state, range.head, -1) || matchBrackets(state, range.head, 1) || range.head > 0 && matchBrackets(state, range.head - 1, 1) || range.head < state.doc.length && matchBrackets(state, range.head + 1, -1);\n    if (!matching || !matching.end) return range;\n    found = true;\n    var head = matching.start.from == range.head ? matching.end.to : matching.end.from;\n    return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);\n  });\n  if (!found) return false;\n  dispatch(setSel(state, selection));\n  return true;\n}\n/**\nMove the selection to the bracket matching the one it is currently\non, if any.\n*/\n\n\nvar cursorMatchingBracket = function cursorMatchingBracket(_ref5) {\n  var state = _ref5.state,\n      dispatch = _ref5.dispatch;\n  return toMatchingBracket(state, dispatch, false);\n};\n/**\nExtend the selection to the bracket matching the one the selection\nhead is currently on, if any.\n*/\n\n\nvar selectMatchingBracket = function selectMatchingBracket(_ref6) {\n  var state = _ref6.state,\n      dispatch = _ref6.dispatch;\n  return toMatchingBracket(state, dispatch, true);\n};\n\nfunction extendSel(view, how) {\n  var selection = updateSel(view.state.selection, function (range) {\n    var head = how(range);\n    return EditorSelection.range(range.anchor, head.head, head.goalColumn);\n  });\n  if (selection.eq(view.state.selection)) return false;\n  view.dispatch(setSel(view.state, selection));\n  return true;\n}\n\nfunction selectByChar(view, forward) {\n  return extendSel(view, function (range) {\n    return view.moveByChar(range, forward);\n  });\n}\n/**\nMove the selection head one character to the left, while leaving\nthe anchor in place.\n*/\n\n\nvar selectCharLeft = function selectCharLeft(view) {\n  return selectByChar(view, !ltrAtCursor(view));\n};\n/**\nMove the selection head one character to the right.\n*/\n\n\nvar selectCharRight = function selectCharRight(view) {\n  return selectByChar(view, ltrAtCursor(view));\n};\n/**\nMove the selection head one character forward.\n*/\n\n\nvar selectCharForward = function selectCharForward(view) {\n  return selectByChar(view, true);\n};\n/**\nMove the selection head one character backward.\n*/\n\n\nvar selectCharBackward = function selectCharBackward(view) {\n  return selectByChar(view, false);\n};\n\nfunction selectByGroup(view, forward) {\n  return extendSel(view, function (range) {\n    return view.moveByGroup(range, forward);\n  });\n}\n/**\nMove the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to\nthe left.\n*/\n\n\nvar selectGroupLeft = function selectGroupLeft(view) {\n  return selectByGroup(view, !ltrAtCursor(view));\n};\n/**\nMove the selection head one group to the right.\n*/\n\n\nvar selectGroupRight = function selectGroupRight(view) {\n  return selectByGroup(view, ltrAtCursor(view));\n};\n/**\nMove the selection head one group forward.\n*/\n\n\nvar selectGroupForward = function selectGroupForward(view) {\n  return selectByGroup(view, true);\n};\n/**\nMove the selection head one group backward.\n*/\n\n\nvar selectGroupBackward = function selectGroupBackward(view) {\n  return selectByGroup(view, false);\n};\n\nfunction selectBySubword(view, forward) {\n  return extendSel(view, function (range) {\n    return moveBySubword(view, range, forward);\n  });\n}\n/**\nMove the selection head one group or camel-case subword forward.\n*/\n\n\nvar selectSubwordForward = function selectSubwordForward(view) {\n  return selectBySubword(view, true);\n};\n/**\nMove the selection head one group or subword backward.\n*/\n\n\nvar selectSubwordBackward = function selectSubwordBackward(view) {\n  return selectBySubword(view, false);\n};\n/**\nMove the selection head over the next syntactic element to the left.\n*/\n\n\nvar selectSyntaxLeft = function selectSyntaxLeft(view) {\n  return extendSel(view, function (range) {\n    return moveBySyntax(view.state, range, !ltrAtCursor(view));\n  });\n};\n/**\nMove the selection head over the next syntactic element to the right.\n*/\n\n\nvar selectSyntaxRight = function selectSyntaxRight(view) {\n  return extendSel(view, function (range) {\n    return moveBySyntax(view.state, range, ltrAtCursor(view));\n  });\n};\n\nfunction selectByLine(view, forward) {\n  return extendSel(view, function (range) {\n    return view.moveVertically(range, forward);\n  });\n}\n/**\nMove the selection head one line up.\n*/\n\n\nvar selectLineUp = function selectLineUp(view) {\n  return selectByLine(view, false);\n};\n/**\nMove the selection head one line down.\n*/\n\n\nvar selectLineDown = function selectLineDown(view) {\n  return selectByLine(view, true);\n};\n\nfunction selectByPage(view, forward) {\n  return extendSel(view, function (range) {\n    return view.moveVertically(range, forward, pageHeight(view));\n  });\n}\n/**\nMove the selection head one page up.\n*/\n\n\nvar selectPageUp = function selectPageUp(view) {\n  return selectByPage(view, false);\n};\n/**\nMove the selection head one page down.\n*/\n\n\nvar selectPageDown = function selectPageDown(view) {\n  return selectByPage(view, true);\n};\n/**\nMove the selection head to the next line boundary.\n*/\n\n\nvar selectLineBoundaryForward = function selectLineBoundaryForward(view) {\n  return extendSel(view, function (range) {\n    return moveByLineBoundary(view, range, true);\n  });\n};\n/**\nMove the selection head to the previous line boundary.\n*/\n\n\nvar selectLineBoundaryBackward = function selectLineBoundaryBackward(view) {\n  return extendSel(view, function (range) {\n    return moveByLineBoundary(view, range, false);\n  });\n};\n/**\nMove the selection head to the start of the line.\n*/\n\n\nvar selectLineStart = function selectLineStart(view) {\n  return extendSel(view, function (range) {\n    return EditorSelection.cursor(view.lineBlockAt(range.head).from);\n  });\n};\n/**\nMove the selection head to the end of the line.\n*/\n\n\nvar selectLineEnd = function selectLineEnd(view) {\n  return extendSel(view, function (range) {\n    return EditorSelection.cursor(view.lineBlockAt(range.head).to);\n  });\n};\n/**\nMove the selection to the start of the document.\n*/\n\n\nvar cursorDocStart = function cursorDocStart(_ref7) {\n  var state = _ref7.state,\n      dispatch = _ref7.dispatch;\n  dispatch(setSel(state, {\n    anchor: 0\n  }));\n  return true;\n};\n/**\nMove the selection to the end of the document.\n*/\n\n\nvar cursorDocEnd = function cursorDocEnd(_ref8) {\n  var state = _ref8.state,\n      dispatch = _ref8.dispatch;\n  dispatch(setSel(state, {\n    anchor: state.doc.length\n  }));\n  return true;\n};\n/**\nMove the selection head to the start of the document.\n*/\n\n\nvar selectDocStart = function selectDocStart(_ref9) {\n  var state = _ref9.state,\n      dispatch = _ref9.dispatch;\n  dispatch(setSel(state, {\n    anchor: state.selection.main.anchor,\n    head: 0\n  }));\n  return true;\n};\n/**\nMove the selection head to the end of the document.\n*/\n\n\nvar selectDocEnd = function selectDocEnd(_ref10) {\n  var state = _ref10.state,\n      dispatch = _ref10.dispatch;\n  dispatch(setSel(state, {\n    anchor: state.selection.main.anchor,\n    head: state.doc.length\n  }));\n  return true;\n};\n/**\nSelect the entire document.\n*/\n\n\nvar selectAll = function selectAll(_ref11) {\n  var state = _ref11.state,\n      dispatch = _ref11.dispatch;\n  dispatch(state.update({\n    selection: {\n      anchor: 0,\n      head: state.doc.length\n    },\n    userEvent: \"select\"\n  }));\n  return true;\n};\n/**\nExpand the selection to cover entire lines.\n*/\n\n\nvar selectLine = function selectLine(_ref12) {\n  var state = _ref12.state,\n      dispatch = _ref12.dispatch;\n  var ranges = selectedLineBlocks(state).map(function (_ref13) {\n    var from = _ref13.from,\n        to = _ref13.to;\n    return EditorSelection.range(from, Math.min(to + 1, state.doc.length));\n  });\n  dispatch(state.update({\n    selection: EditorSelection.create(ranges),\n    userEvent: \"select\"\n  }));\n  return true;\n};\n/**\nSelect the next syntactic construct that is larger than the\nselection. Note that this will only work insofar as the language\n[provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full\nsyntax tree.\n*/\n\n\nvar selectParentSyntax = function selectParentSyntax(_ref14) {\n  var state = _ref14.state,\n      dispatch = _ref14.dispatch;\n  var selection = updateSel(state.selection, function (range) {\n    var _a;\n\n    var context = syntaxTree(state).resolveInner(range.head, 1);\n\n    while (!(context.from < range.from && context.to >= range.to || context.to > range.to && context.from <= range.from || !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent))) {\n      context = context.parent;\n    }\n\n    return EditorSelection.range(context.to, context.from);\n  });\n  dispatch(setSel(state, selection));\n  return true;\n};\n/**\nSimplify the current selection. When multiple ranges are selected,\nreduce it to its main range. Otherwise, if the selection is\nnon-empty, convert it to a cursor selection.\n*/\n\n\nvar simplifySelection = function simplifySelection(_ref15) {\n  var state = _ref15.state,\n      dispatch = _ref15.dispatch;\n  var cur = state.selection,\n      selection = null;\n  if (cur.ranges.length > 1) selection = EditorSelection.create([cur.main]);else if (!cur.main.empty) selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);\n  if (!selection) return false;\n  dispatch(setSel(state, selection));\n  return true;\n};\n\nfunction deleteBy(_ref16, by) {\n  var state = _ref16.state,\n      dispatch = _ref16.dispatch;\n  if (state.readOnly) return false;\n  var event = \"delete.selection\";\n  var changes = state.changeByRange(function (range) {\n    var from = range.from,\n        to = range.to;\n\n    if (from == to) {\n      var towards = by(from);\n      if (towards < from) event = \"delete.backward\";else if (towards > from) event = \"delete.forward\";\n      from = Math.min(from, towards);\n      to = Math.max(to, towards);\n    }\n\n    return from == to ? {\n      range: range\n    } : {\n      changes: {\n        from: from,\n        to: to\n      },\n      range: EditorSelection.cursor(from)\n    };\n  });\n  if (changes.changes.empty) return false;\n  dispatch(state.update(changes, {\n    scrollIntoView: true,\n    userEvent: event,\n    effects: event == \"delete.selection\" ? EditorView.announce.of(state.phrase(\"Selection deleted\")) : undefined\n  }));\n  return true;\n}\n\nfunction skipAtomic(target, pos, forward) {\n  if (target instanceof EditorView) {\n    var _iterator6 = _createForOfIteratorHelper(target.state.facet(EditorView.atomicRanges).map(function (f) {\n      return f(target);\n    })),\n        _step6;\n\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var ranges = _step6.value;\n        ranges.between(pos, pos, function (from, to) {\n          if (from < pos && to > pos) pos = forward ? to : from;\n        });\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n  }\n\n  return pos;\n}\n\nvar deleteByChar = function deleteByChar(target, forward) {\n  return deleteBy(target, function (pos) {\n    var state = target.state,\n        line = state.doc.lineAt(pos),\n        before,\n        targetPos;\n\n    if (!forward && pos > line.from && pos < line.from + 200 && !/[^ \\t]/.test(before = line.text.slice(0, pos - line.from))) {\n      if (before[before.length - 1] == \"\\t\") return pos - 1;\n      var col = countColumn(before, state.tabSize),\n          drop = col % getIndentUnit(state) || getIndentUnit(state);\n\n      for (var i = 0; i < drop && before[before.length - 1 - i] == \" \"; i++) {\n        pos--;\n      }\n\n      targetPos = pos;\n    } else {\n      targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;\n      if (targetPos == pos && line.number != (forward ? state.doc.lines : 1)) targetPos += forward ? 1 : -1;\n    }\n\n    return skipAtomic(target, targetPos, forward);\n  });\n};\n/**\nDelete the selection, or, for cursor selections, the character\nbefore the cursor.\n*/\n\n\nvar deleteCharBackward = function deleteCharBackward(view) {\n  return deleteByChar(view, false);\n};\n/**\nDelete the selection or the character after the cursor.\n*/\n\n\nvar deleteCharForward = function deleteCharForward(view) {\n  return deleteByChar(view, true);\n};\n\nvar deleteByGroup = function deleteByGroup(target, forward) {\n  return deleteBy(target, function (start) {\n    var pos = start,\n        state = target.state,\n        line = state.doc.lineAt(pos);\n    var categorize = state.charCategorizer(pos);\n\n    for (var cat = null;;) {\n      if (pos == (forward ? line.to : line.from)) {\n        if (pos == start && line.number != (forward ? state.doc.lines : 1)) pos += forward ? 1 : -1;\n        break;\n      }\n\n      var next = findClusterBreak(line.text, pos - line.from, forward) + line.from;\n      var nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);\n      var nextCat = categorize(nextChar);\n      if (cat != null && nextCat != cat) break;\n      if (nextChar != \" \" || pos != start) cat = nextCat;\n      pos = next;\n    }\n\n    return skipAtomic(target, pos, forward);\n  });\n};\n/**\nDelete the selection or backward until the end of the next\n[group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of\nwhitespace when they consist of a single space.\n*/\n\n\nvar deleteGroupBackward = function deleteGroupBackward(target) {\n  return deleteByGroup(target, false);\n};\n/**\nDelete the selection or forward until the end of the next group.\n*/\n\n\nvar deleteGroupForward = function deleteGroupForward(target) {\n  return deleteByGroup(target, true);\n};\n/**\nDelete the selection, or, if it is a cursor selection, delete to\nthe end of the line. If the cursor is directly at the end of the\nline, delete the line break after it.\n*/\n\n\nvar deleteToLineEnd = function deleteToLineEnd(view) {\n  return deleteBy(view, function (pos) {\n    var lineEnd = view.lineBlockAt(pos).to;\n    return skipAtomic(view, pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1), true);\n  });\n};\n/**\nDelete the selection, or, if it is a cursor selection, delete to\nthe start of the line. If the cursor is directly at the start of the\nline, delete the line break before it.\n*/\n\n\nvar deleteToLineStart = function deleteToLineStart(view) {\n  return deleteBy(view, function (pos) {\n    var lineStart = view.lineBlockAt(pos).from;\n    return skipAtomic(view, pos > lineStart ? lineStart : Math.max(0, pos - 1), false);\n  });\n};\n/**\nDelete all whitespace directly before a line end from the\ndocument.\n*/\n\n\nvar deleteTrailingWhitespace = function deleteTrailingWhitespace(_ref17) {\n  var state = _ref17.state,\n      dispatch = _ref17.dispatch;\n  if (state.readOnly) return false;\n  var changes = [];\n\n  for (var pos = 0, prev = \"\", iter = state.doc.iter();;) {\n    iter.next();\n\n    if (iter.lineBreak || iter.done) {\n      var trailing = prev.search(/\\s+$/);\n      if (trailing > -1) changes.push({\n        from: pos - (prev.length - trailing),\n        to: pos\n      });\n      if (iter.done) break;\n      prev = \"\";\n    } else {\n      prev = iter.value;\n    }\n\n    pos += iter.value.length;\n  }\n\n  if (!changes.length) return false;\n  dispatch(state.update({\n    changes: changes,\n    userEvent: \"delete\"\n  }));\n  return true;\n};\n/**\nReplace each selection range with a line break, leaving the cursor\non the line before the break.\n*/\n\n\nvar splitLine = function splitLine(_ref18) {\n  var state = _ref18.state,\n      dispatch = _ref18.dispatch;\n  if (state.readOnly) return false;\n  var changes = state.changeByRange(function (range) {\n    return {\n      changes: {\n        from: range.from,\n        to: range.to,\n        insert: Text.of([\"\", \"\"])\n      },\n      range: EditorSelection.cursor(range.from)\n    };\n  });\n  dispatch(state.update(changes, {\n    scrollIntoView: true,\n    userEvent: \"input\"\n  }));\n  return true;\n};\n/**\nFlip the characters before and after the cursor(s).\n*/\n\n\nvar transposeChars = function transposeChars(_ref19) {\n  var state = _ref19.state,\n      dispatch = _ref19.dispatch;\n  if (state.readOnly) return false;\n  var changes = state.changeByRange(function (range) {\n    if (!range.empty || range.from == 0 || range.from == state.doc.length) return {\n      range: range\n    };\n    var pos = range.from,\n        line = state.doc.lineAt(pos);\n    var from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;\n    var to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;\n    return {\n      changes: {\n        from: from,\n        to: to,\n        insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos))\n      },\n      range: EditorSelection.cursor(to)\n    };\n  });\n  if (changes.changes.empty) return false;\n  dispatch(state.update(changes, {\n    scrollIntoView: true,\n    userEvent: \"move.character\"\n  }));\n  return true;\n};\n\nfunction selectedLineBlocks(state) {\n  var blocks = [],\n      upto = -1;\n\n  var _iterator7 = _createForOfIteratorHelper(state.selection.ranges),\n      _step7;\n\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var range = _step7.value;\n      var startLine = state.doc.lineAt(range.from),\n          endLine = state.doc.lineAt(range.to);\n      if (!range.empty && range.to == endLine.from) endLine = state.doc.lineAt(range.to - 1);\n\n      if (upto >= startLine.number) {\n        var prev = blocks[blocks.length - 1];\n        prev.to = endLine.to;\n        prev.ranges.push(range);\n      } else {\n        blocks.push({\n          from: startLine.from,\n          to: endLine.to,\n          ranges: [range]\n        });\n      }\n\n      upto = endLine.number + 1;\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return blocks;\n}\n\nfunction moveLine(state, dispatch, forward) {\n  if (state.readOnly) return false;\n  var changes = [],\n      ranges = [];\n\n  var _iterator8 = _createForOfIteratorHelper(selectedLineBlocks(state)),\n      _step8;\n\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var block = _step8.value;\n      if (forward ? block.to == state.doc.length : block.from == 0) continue;\n      var nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);\n      var size = nextLine.length + 1;\n\n      if (forward) {\n        changes.push({\n          from: block.to,\n          to: nextLine.to\n        }, {\n          from: block.from,\n          insert: nextLine.text + state.lineBreak\n        });\n\n        var _iterator9 = _createForOfIteratorHelper(block.ranges),\n            _step9;\n\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var r = _step9.value;\n            ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n      } else {\n        changes.push({\n          from: nextLine.from,\n          to: block.from\n        }, {\n          from: block.to,\n          insert: state.lineBreak + nextLine.text\n        });\n\n        var _iterator10 = _createForOfIteratorHelper(block.ranges),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var _r = _step10.value;\n            ranges.push(EditorSelection.range(_r.anchor - size, _r.head - size));\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n\n  if (!changes.length) return false;\n  dispatch(state.update({\n    changes: changes,\n    scrollIntoView: true,\n    selection: EditorSelection.create(ranges, state.selection.mainIndex),\n    userEvent: \"move.line\"\n  }));\n  return true;\n}\n/**\nMove the selected lines up one line.\n*/\n\n\nvar moveLineUp = function moveLineUp(_ref20) {\n  var state = _ref20.state,\n      dispatch = _ref20.dispatch;\n  return moveLine(state, dispatch, false);\n};\n/**\nMove the selected lines down one line.\n*/\n\n\nvar moveLineDown = function moveLineDown(_ref21) {\n  var state = _ref21.state,\n      dispatch = _ref21.dispatch;\n  return moveLine(state, dispatch, true);\n};\n\nfunction copyLine(state, dispatch, forward) {\n  if (state.readOnly) return false;\n  var changes = [];\n\n  var _iterator11 = _createForOfIteratorHelper(selectedLineBlocks(state)),\n      _step11;\n\n  try {\n    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n      var block = _step11.value;\n      if (forward) changes.push({\n        from: block.from,\n        insert: state.doc.slice(block.from, block.to) + state.lineBreak\n      });else changes.push({\n        from: block.to,\n        insert: state.lineBreak + state.doc.slice(block.from, block.to)\n      });\n    }\n  } catch (err) {\n    _iterator11.e(err);\n  } finally {\n    _iterator11.f();\n  }\n\n  dispatch(state.update({\n    changes: changes,\n    scrollIntoView: true,\n    userEvent: \"input.copyline\"\n  }));\n  return true;\n}\n/**\nCreate a copy of the selected lines. Keep the selection in the top copy.\n*/\n\n\nvar copyLineUp = function copyLineUp(_ref22) {\n  var state = _ref22.state,\n      dispatch = _ref22.dispatch;\n  return copyLine(state, dispatch, false);\n};\n/**\nCreate a copy of the selected lines. Keep the selection in the bottom copy.\n*/\n\n\nvar copyLineDown = function copyLineDown(_ref23) {\n  var state = _ref23.state,\n      dispatch = _ref23.dispatch;\n  return copyLine(state, dispatch, true);\n};\n/**\nDelete selected lines.\n*/\n\n\nvar deleteLine = function deleteLine(view) {\n  if (view.state.readOnly) return false;\n  var state = view.state,\n      changes = state.changes(selectedLineBlocks(state).map(function (_ref24) {\n    var from = _ref24.from,\n        to = _ref24.to;\n    if (from > 0) from--;else if (to < state.doc.length) to++;\n    return {\n      from: from,\n      to: to\n    };\n  }));\n  var selection = updateSel(state.selection, function (range) {\n    return view.moveVertically(range, true);\n  }).map(changes);\n  view.dispatch({\n    changes: changes,\n    selection: selection,\n    scrollIntoView: true,\n    userEvent: \"delete.line\"\n  });\n  return true;\n};\n/**\nReplace the selection with a newline.\n*/\n\n\nvar insertNewline = function insertNewline(_ref25) {\n  var state = _ref25.state,\n      dispatch = _ref25.dispatch;\n  dispatch(state.update(state.replaceSelection(state.lineBreak), {\n    scrollIntoView: true,\n    userEvent: \"input\"\n  }));\n  return true;\n};\n\nfunction isBetweenBrackets(state, pos) {\n  if (/\\(\\)|\\[\\]|\\{\\}/.test(state.sliceDoc(pos - 1, pos + 1))) return {\n    from: pos,\n    to: pos\n  };\n  var context = syntaxTree(state).resolveInner(pos);\n  var before = context.childBefore(pos),\n      after = context.childAfter(pos),\n      closedBy;\n  if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from) return {\n    from: before.to,\n    to: after.from\n  };\n  return null;\n}\n/**\nReplace the selection with a newline and indent the newly created\nline(s). If the current line consists only of whitespace, this\nwill also delete that whitespace. When the cursor is between\nmatching brackets, an additional newline will be inserted after\nthe cursor.\n*/\n\n\nvar insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);\n/**\nCreate a blank, indented line below the current line.\n*/\n\nvar insertBlankLine = /*@__PURE__*/newlineAndIndent(true);\n\nfunction newlineAndIndent(atEof) {\n  return function (_ref26) {\n    var state = _ref26.state,\n        dispatch = _ref26.dispatch;\n    if (state.readOnly) return false;\n    var changes = state.changeByRange(function (range) {\n      var from = range.from,\n          to = range.to,\n          line = state.doc.lineAt(from);\n      var explode = !atEof && from == to && isBetweenBrackets(state, from);\n      if (atEof) from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;\n      var cx = new IndentContext(state, {\n        simulateBreak: from,\n        simulateDoubleBreak: !!explode\n      });\n      var indent = getIndentation(cx, from);\n      if (indent == null) indent = /^\\s*/.exec(state.doc.lineAt(from).text)[0].length;\n\n      while (to < line.to && /\\s/.test(line.text[to - line.from])) {\n        to++;\n      }\n\n      if (explode) {\n        from = explode.from;\n        to = explode.to;\n      } else if (from > line.from && from < line.from + 100 && !/\\S/.test(line.text.slice(0, from))) from = line.from;\n\n      var insert = [\"\", indentString(state, indent)];\n      if (explode) insert.push(indentString(state, cx.lineIndent(line.from, -1)));\n      return {\n        changes: {\n          from: from,\n          to: to,\n          insert: Text.of(insert)\n        },\n        range: EditorSelection.cursor(from + 1 + insert[1].length)\n      };\n    });\n    dispatch(state.update(changes, {\n      scrollIntoView: true,\n      userEvent: \"input\"\n    }));\n    return true;\n  };\n}\n\nfunction changeBySelectedLine(state, f) {\n  var atLine = -1;\n  return state.changeByRange(function (range) {\n    var changes = [];\n\n    for (var pos = range.from; pos <= range.to;) {\n      var line = state.doc.lineAt(pos);\n\n      if (line.number > atLine && (range.empty || range.to > line.from)) {\n        f(line, changes, range);\n        atLine = line.number;\n      }\n\n      pos = line.to + 1;\n    }\n\n    var changeSet = state.changes(changes);\n    return {\n      changes: changes,\n      range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1))\n    };\n  });\n}\n/**\nAuto-indent the selected lines. This uses the [indentation service\nfacet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent\ninformation.\n*/\n\n\nvar indentSelection = function indentSelection(_ref27) {\n  var state = _ref27.state,\n      dispatch = _ref27.dispatch;\n  if (state.readOnly) return false;\n  var updated = Object.create(null);\n  var context = new IndentContext(state, {\n    overrideIndentation: function overrideIndentation(start) {\n      var found = updated[start];\n      return found == null ? -1 : found;\n    }\n  });\n  var changes = changeBySelectedLine(state, function (line, changes, range) {\n    var indent = getIndentation(context, line.from);\n    if (indent == null) return;\n    if (!/\\S/.test(line.text)) indent = 0;\n    var cur = /^\\s*/.exec(line.text)[0];\n    var norm = indentString(state, indent);\n\n    if (cur != norm || range.from < line.from + cur.length) {\n      updated[line.from] = indent;\n      changes.push({\n        from: line.from,\n        to: line.from + cur.length,\n        insert: norm\n      });\n    }\n  });\n  if (!changes.changes.empty) dispatch(state.update(changes, {\n    userEvent: \"indent\"\n  }));\n  return true;\n};\n/**\nAdd a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected\nlines.\n*/\n\n\nvar indentMore = function indentMore(_ref28) {\n  var state = _ref28.state,\n      dispatch = _ref28.dispatch;\n  if (state.readOnly) return false;\n  dispatch(state.update(changeBySelectedLine(state, function (line, changes) {\n    changes.push({\n      from: line.from,\n      insert: state.facet(indentUnit)\n    });\n  }), {\n    userEvent: \"input.indent\"\n  }));\n  return true;\n};\n/**\nRemove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all\nselected lines.\n*/\n\n\nvar indentLess = function indentLess(_ref29) {\n  var state = _ref29.state,\n      dispatch = _ref29.dispatch;\n  if (state.readOnly) return false;\n  dispatch(state.update(changeBySelectedLine(state, function (line, changes) {\n    var space = /^\\s*/.exec(line.text)[0];\n    if (!space) return;\n    var col = countColumn(space, state.tabSize),\n        keep = 0;\n    var insert = indentString(state, Math.max(0, col - getIndentUnit(state)));\n\n    while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep)) {\n      keep++;\n    }\n\n    changes.push({\n      from: line.from + keep,\n      to: line.from + space.length,\n      insert: insert.slice(keep)\n    });\n  }), {\n    userEvent: \"delete.dedent\"\n  }));\n  return true;\n};\n/**\nInsert a tab character at the cursor or, if something is selected,\nuse [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) to indent the entire\nselection.\n*/\n\n\nvar insertTab = function insertTab(_ref30) {\n  var state = _ref30.state,\n      dispatch = _ref30.dispatch;\n  if (state.selection.ranges.some(function (r) {\n    return !r.empty;\n  })) return indentMore({\n    state: state,\n    dispatch: dispatch\n  });\n  dispatch(state.update(state.replaceSelection(\"\\t\"), {\n    scrollIntoView: true,\n    userEvent: \"input\"\n  }));\n  return true;\n};\n/**\nArray of key bindings containing the Emacs-style bindings that are\navailable on macOS by default.\n\n - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)\n - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)\n - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)\n - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)\n - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)\n - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)\n - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)\n - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)\n - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)\n - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)\n - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)\n - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)\n - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)\n - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)\n*/\n\n\nvar emacsStyleKeymap = [{\n  key: \"Ctrl-b\",\n  run: cursorCharLeft,\n  shift: selectCharLeft,\n  preventDefault: true\n}, {\n  key: \"Ctrl-f\",\n  run: cursorCharRight,\n  shift: selectCharRight\n}, {\n  key: \"Ctrl-p\",\n  run: cursorLineUp,\n  shift: selectLineUp\n}, {\n  key: \"Ctrl-n\",\n  run: cursorLineDown,\n  shift: selectLineDown\n}, {\n  key: \"Ctrl-a\",\n  run: cursorLineStart,\n  shift: selectLineStart\n}, {\n  key: \"Ctrl-e\",\n  run: cursorLineEnd,\n  shift: selectLineEnd\n}, {\n  key: \"Ctrl-d\",\n  run: deleteCharForward\n}, {\n  key: \"Ctrl-h\",\n  run: deleteCharBackward\n}, {\n  key: \"Ctrl-k\",\n  run: deleteToLineEnd\n}, {\n  key: \"Ctrl-Alt-h\",\n  run: deleteGroupBackward\n}, {\n  key: \"Ctrl-o\",\n  run: splitLine\n}, {\n  key: \"Ctrl-t\",\n  run: transposeChars\n}, {\n  key: \"Ctrl-v\",\n  run: cursorPageDown\n}];\n/**\nAn array of key bindings closely sticking to platform-standard or\nwidely used bindings. (This includes the bindings from\n[`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`\nproperty changed to `mac`.)\n\n - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)\n - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)\n - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)\n - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)\n - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)\n - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)\n - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)\n - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)\n - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)\n - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)\n - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)\n - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)\n - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)\n - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)\n - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)\n - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)\n - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)\n - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)\n - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)\n - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)\n - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)\n - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)\n - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)\n - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)\n - Cmd-Backspace (macOS): [`deleteToLineStart`](https://codemirror.net/6/docs/ref/#commands.deleteToLineStart).\n - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).\n*/\n\nvar standardKeymap = /*@__PURE__*/[{\n  key: \"ArrowLeft\",\n  run: cursorCharLeft,\n  shift: selectCharLeft,\n  preventDefault: true\n}, {\n  key: \"Mod-ArrowLeft\",\n  mac: \"Alt-ArrowLeft\",\n  run: cursorGroupLeft,\n  shift: selectGroupLeft\n}, {\n  mac: \"Cmd-ArrowLeft\",\n  run: cursorLineBoundaryBackward,\n  shift: selectLineBoundaryBackward\n}, {\n  key: \"ArrowRight\",\n  run: cursorCharRight,\n  shift: selectCharRight,\n  preventDefault: true\n}, {\n  key: \"Mod-ArrowRight\",\n  mac: \"Alt-ArrowRight\",\n  run: cursorGroupRight,\n  shift: selectGroupRight\n}, {\n  mac: \"Cmd-ArrowRight\",\n  run: cursorLineBoundaryForward,\n  shift: selectLineBoundaryForward\n}, {\n  key: \"ArrowUp\",\n  run: cursorLineUp,\n  shift: selectLineUp,\n  preventDefault: true\n}, {\n  mac: \"Cmd-ArrowUp\",\n  run: cursorDocStart,\n  shift: selectDocStart\n}, {\n  mac: \"Ctrl-ArrowUp\",\n  run: cursorPageUp,\n  shift: selectPageUp\n}, {\n  key: \"ArrowDown\",\n  run: cursorLineDown,\n  shift: selectLineDown,\n  preventDefault: true\n}, {\n  mac: \"Cmd-ArrowDown\",\n  run: cursorDocEnd,\n  shift: selectDocEnd\n}, {\n  mac: \"Ctrl-ArrowDown\",\n  run: cursorPageDown,\n  shift: selectPageDown\n}, {\n  key: \"PageUp\",\n  run: cursorPageUp,\n  shift: selectPageUp\n}, {\n  key: \"PageDown\",\n  run: cursorPageDown,\n  shift: selectPageDown\n}, {\n  key: \"Home\",\n  run: cursorLineBoundaryBackward,\n  shift: selectLineBoundaryBackward,\n  preventDefault: true\n}, {\n  key: \"Mod-Home\",\n  run: cursorDocStart,\n  shift: selectDocStart\n}, {\n  key: \"End\",\n  run: cursorLineBoundaryForward,\n  shift: selectLineBoundaryForward,\n  preventDefault: true\n}, {\n  key: \"Mod-End\",\n  run: cursorDocEnd,\n  shift: selectDocEnd\n}, {\n  key: \"Enter\",\n  run: insertNewlineAndIndent\n}, {\n  key: \"Mod-a\",\n  run: selectAll\n}, {\n  key: \"Backspace\",\n  run: deleteCharBackward,\n  shift: deleteCharBackward\n}, {\n  key: \"Delete\",\n  run: deleteCharForward\n}, {\n  key: \"Mod-Backspace\",\n  mac: \"Alt-Backspace\",\n  run: deleteGroupBackward\n}, {\n  key: \"Mod-Delete\",\n  mac: \"Alt-Delete\",\n  run: deleteGroupForward\n}, {\n  mac: \"Mod-Backspace\",\n  run: deleteToLineStart\n}, {\n  mac: \"Mod-Delete\",\n  run: deleteToLineEnd\n}].concat( /*@__PURE__*/emacsStyleKeymap.map(function (b) {\n  return {\n    mac: b.key,\n    run: b.run,\n    shift: b.shift\n  };\n}));\n/**\nThe default keymap. Includes all bindings from\n[`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:\n\n- Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)\n- Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)\n- Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)\n- Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)\n- Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)\n- Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)\n- Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)\n- Ctrl-Enter (Comd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)\n- Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)\n- Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)\n- Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)\n- Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)\n- Ctrl-Alt-\\\\ (Cmd-Alt-\\\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)\n- Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)\n- Shift-Ctrl-\\\\ (Shift-Cmd-\\\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)\n- Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).\n- Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).\n*/\n\nvar defaultKeymap = /*@__PURE__*/[{\n  key: \"Alt-ArrowLeft\",\n  mac: \"Ctrl-ArrowLeft\",\n  run: cursorSyntaxLeft,\n  shift: selectSyntaxLeft\n}, {\n  key: \"Alt-ArrowRight\",\n  mac: \"Ctrl-ArrowRight\",\n  run: cursorSyntaxRight,\n  shift: selectSyntaxRight\n}, {\n  key: \"Alt-ArrowUp\",\n  run: moveLineUp\n}, {\n  key: \"Shift-Alt-ArrowUp\",\n  run: copyLineUp\n}, {\n  key: \"Alt-ArrowDown\",\n  run: moveLineDown\n}, {\n  key: \"Shift-Alt-ArrowDown\",\n  run: copyLineDown\n}, {\n  key: \"Escape\",\n  run: simplifySelection\n}, {\n  key: \"Mod-Enter\",\n  run: insertBlankLine\n}, {\n  key: \"Alt-l\",\n  mac: \"Ctrl-l\",\n  run: selectLine\n}, {\n  key: \"Mod-i\",\n  run: selectParentSyntax,\n  preventDefault: true\n}, {\n  key: \"Mod-[\",\n  run: indentLess\n}, {\n  key: \"Mod-]\",\n  run: indentMore\n}, {\n  key: \"Mod-Alt-\\\\\",\n  run: indentSelection\n}, {\n  key: \"Shift-Mod-k\",\n  run: deleteLine\n}, {\n  key: \"Shift-Mod-\\\\\",\n  run: cursorMatchingBracket\n}, {\n  key: \"Mod-/\",\n  run: toggleComment\n}, {\n  key: \"Alt-A\",\n  run: toggleBlockComment\n}].concat(standardKeymap);\n/**\nA binding that binds Tab to [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) and\nShift-Tab to [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess).\nPlease see the [Tab example](../../examples/tab/) before using\nthis.\n*/\n\nvar indentWithTab = {\n  key: \"Tab\",\n  run: indentMore,\n  shift: indentLess\n};\nexport { blockComment, blockUncomment, copyLineDown, copyLineUp, cursorCharBackward, cursorCharForward, cursorCharLeft, cursorCharRight, cursorDocEnd, cursorDocStart, cursorGroupBackward, cursorGroupForward, cursorGroupLeft, cursorGroupRight, cursorLineBoundaryBackward, cursorLineBoundaryForward, cursorLineDown, cursorLineEnd, cursorLineStart, cursorLineUp, cursorMatchingBracket, cursorPageDown, cursorPageUp, cursorSubwordBackward, cursorSubwordForward, cursorSyntaxLeft, cursorSyntaxRight, defaultKeymap, deleteCharBackward, deleteCharForward, deleteGroupBackward, deleteGroupForward, deleteLine, deleteToLineEnd, deleteToLineStart, deleteTrailingWhitespace, emacsStyleKeymap, history, historyField, historyKeymap, indentLess, indentMore, indentSelection, indentWithTab, insertBlankLine, insertNewline, insertNewlineAndIndent, insertTab, invertedEffects, isolateHistory, lineComment, lineUncomment, moveLineDown, moveLineUp, redo, redoDepth, redoSelection, selectAll, selectCharBackward, selectCharForward, selectCharLeft, selectCharRight, selectDocEnd, selectDocStart, selectGroupBackward, selectGroupForward, selectGroupLeft, selectGroupRight, selectLine, selectLineBoundaryBackward, selectLineBoundaryForward, selectLineDown, selectLineEnd, selectLineStart, selectLineUp, selectMatchingBracket, selectPageDown, selectPageUp, selectParentSyntax, selectSubwordBackward, selectSubwordForward, selectSyntaxLeft, selectSyntaxRight, simplifySelection, splitLine, standardKeymap, toggleBlockComment, toggleBlockCommentByLine, toggleComment, toggleLineComment, transposeChars, undo, undoDepth, undoSelection };","map":null,"metadata":{},"sourceType":"module"}