{"ast":null,"code":"var _jsxFileName = \"/Users/kw/Desktop/cscc09/project-pacer/frontend/src/_components/PrivateRoute.jsx\";\nimport React from 'react';\nimport { Route, Navigate } from 'react-router-dom';\nimport { authenticationService } from './../_services';\nimport { history, Role } from '../_helpers';\n\nfunction PrivateRoute(_ref) {\n  var isAllowed = _ref.isAllowed,\n      _ref$redirectPath = _ref.redirectPath,\n      redirectPath = _ref$redirectPath === void 0 ? '/login' : _ref$redirectPath,\n      children = _ref.children;\n  console.log(isAllowed);\n\n  if (!isAllowed) {\n    console.log(\"is not allowed\"); // not logged in so redirect to login page with the return url\n\n    return /*#__PURE__*/React.createElement(Navigate, {\n      to: redirectPath,\n      state: {\n        from: history.location\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 20\n      }\n    });\n  } // if (isAdmin && currentUser.role === Role.Admin) {\n  //     return <Navigate to='/teacher' state={{ from: history.location }} />\n  // }\n  // if (roles[0] === Role.User && currentUser.role === Role.User) {\n  //     return <Navigate to='/student' state={{ from: history.location }} />\n  // }\n  // // check if route is restricted by role\n  // if (roles && roles.indexOf(currentUser.role) === -1) {\n  //     // role not authorised so redirect to home page\n  //     return <Navigate to='/login' />\n  // }\n  // authorised so return component\n\n\n  return children;\n}\n\nexport { PrivateRoute };","map":{"version":3,"names":["React","Route","Navigate","authenticationService","history","Role","PrivateRoute","isAllowed","redirectPath","children","console","log","from","location"],"sources":["/Users/kw/Desktop/cscc09/project-pacer/frontend/src/_components/PrivateRoute.jsx"],"sourcesContent":["import React from 'react';\nimport { Route, Navigate } from 'react-router-dom';\n\nimport { authenticationService } from './../_services';\nimport { history, Role } from '../_helpers';\n\nfunction PrivateRoute({ isAllowed, redirectPath='/login', children }) {\n        console.log(isAllowed)\n\n        if (!isAllowed) {\n            console.log(\"is not allowed\")\n            // not logged in so redirect to login page with the return url\n            return <Navigate to={redirectPath} state={{ from: history.location }}/>\n        }\n\n        // if (isAdmin && currentUser.role === Role.Admin) {\n        //     return <Navigate to='/teacher' state={{ from: history.location }} />\n        // }\n\n        // if (roles[0] === Role.User && currentUser.role === Role.User) {\n        //     return <Navigate to='/student' state={{ from: history.location }} />\n        // }\n\n        // // check if route is restricted by role\n        // if (roles && roles.indexOf(currentUser.role) === -1) {\n        //     // role not authorised so redirect to home page\n        //     return <Navigate to='/login' />\n        // }\n\n\n\n        // authorised so return component\n        return children\n}\n\nexport { PrivateRoute }"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AAEA,SAASC,qBAAT,QAAsC,gBAAtC;AACA,SAASC,OAAT,EAAkBC,IAAlB,QAA8B,aAA9B;;AAEA,SAASC,YAAT,OAAsE;EAAA,IAA9CC,SAA8C,QAA9CA,SAA8C;EAAA,6BAAnCC,YAAmC;EAAA,IAAnCA,YAAmC,kCAAtB,QAAsB;EAAA,IAAZC,QAAY,QAAZA,QAAY;EAC9DC,OAAO,CAACC,GAAR,CAAYJ,SAAZ;;EAEA,IAAI,CAACA,SAAL,EAAgB;IACZG,OAAO,CAACC,GAAR,CAAY,gBAAZ,EADY,CAEZ;;IACA,oBAAO,oBAAC,QAAD;MAAU,EAAE,EAAEH,YAAd;MAA4B,KAAK,EAAE;QAAEI,IAAI,EAAER,OAAO,CAACS;MAAhB,CAAnC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAP;EACH,CAP6D,CAS9D;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAIA;;;EACA,OAAOJ,QAAP;AACP;;AAED,SAASH,YAAT"},"metadata":{},"sourceType":"module"}